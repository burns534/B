program ::= function_definition
program ::= struct_definition

primary_expression ::= id

unary_operator ::= &
unary_operator ::= !
unary_operator ::= -
unary_operator ::= *

unary_expression ::= unary_operator primary_expression

multiplicative_expression ::= unary_expression

additive_expression_prime ::= + additive_expression
additive_expression_prime ::= - additive_expression
additive_expression_prime ::= ''
additive_expression ::= multiplicative_expression additive_expression_prime

relational_expression ::= additive_expression

and_expression ::= relational_expression

or_expression ::= and_expression

assignment_expression ::= or_expression
assignment_expression ::= unary_expression = assignment_expression

expression ::= assignment_expression

variable_definition ::= id = int ;

statement ::= variable_definition

statements_prime ::= statements
statements_prime ::= ''
statements ::= statement statements_prime

code_block ::= { statements }

function_argument_list_prime ::= , function_argument_list
function_argument_list_prime ::= ''
function_argument_list ::= id function_argument_list_prime

function_definition ::= id ( function_argument_list ) code_block

struct_definition_list_prime ::= struct_definition_list
struct_definition_list_prime ::= ''
struct_definition_list ::= id ; struct_definition_list_prime
struct_definition ::= struct id { struct_definition_list }